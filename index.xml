<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@masakipedia</title>
    <link>https://masakipedia.github.io/</link>
    <description>Recent content on @masakipedia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 24 Apr 2018 19:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://masakipedia.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Voice] About generation of voice</title>
      <link>https://masakipedia.github.io/blog/2018/04/24/2018-04-24-1/</link>
      <pubDate>Tue, 24 Apr 2018 19:00:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/24/2018-04-24-1/</guid>
      <description>はじめに 音声・音響についての研究に、GPGPUを活用する予定なので、
「人間はどのように音声を生成するのか」の勉強についてまとめます。
（図は教科書の転載になるため、略）

音声発生プロセス  語句の選択 言語的形式に変換 発声器官で音声を生成 聴覚器官へ伝達 脳が理解  話して自身にも伝わり、発声器官の制御を行なっている。 （= speech chain; 言葉の鎖）

空気と発声の関係 空気の流れを生成  腹筋が横隔膜を押し上げる。 肺から空気が押し上げられる。  空気の通り道  気管 喉頭にある声門（声帯の間）  空気の流れから発声へ  声を出そうとする時のみ、声帯同士が接近する。 声帯の間を通り抜ける際、空気流によって声門が開閉を繰り返す。 声門の開閉が空気の断続を生成する。 音源となる。（= glottal source; 声帯音源）   基本周期 = 声帯の振動周期 基本周波数 = 1 / 基本周期 声が高い == 基本周期が短い  
声帯音源を変化させる  声道
 場所 : （声帯 &amp;lt; 声道 &amp;lt;= 鼻孔） || （声帯 &amp;lt; 声道 &amp;lt; 口唇） 役割 : 声帯音源を変化させる</description>
    </item>
    
    <item>
      <title>[Swift4] Pointer with playground</title>
      <link>https://masakipedia.github.io/blog/2018/04/23/2018-04-23-1/</link>
      <pubDate>Mon, 23 Apr 2018 16:00:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/23/2018-04-23-1/</guid>
      <description>はじめに Swift でのポインタについて学びました。
以下は Playground で色々試したコードです。

参考 : https://developer.apple.com/documentation/swift/unsafemutablepointer

Playground func printInt(atAddress p: UnsafePointer&amp;lt;Int&amp;gt;) { print(&amp;quot;printInt: \(p.pointee)&amp;quot;) } func changeInt(atAddress p: UnsafeMutablePointer&amp;lt;Int&amp;gt;, value: Int) { p.pointee = value } // - UnsafePointer ----------------------------------- let unsafePointer = { () -&amp;gt; () in print(&amp;quot;- UnsafePointer -------&amp;quot;) var value: Int = 23 print(&amp;quot;print: \(value)&amp;quot;) printInt(atAddress: &amp;amp;value) print() }() // - UnsafeMutablePointer ---------------------------- let unsafeMutablePointer = { () -&amp;gt; () in print(&amp;quot;- UnsafeMutablePointer -------&amp;quot;) var value: Int = 100 print(&amp;quot;print: \(value)&amp;quot;) changeInt(atAddress: &amp;amp;value, value: 0) printInt(atAddress: &amp;amp;value) print() }() // - UnsafeMutablePointer 2 -------------------------- let unsafeMutablePointer2 = { () -&amp;gt; () in print(&amp;quot;- UnsafeMutablePointer 2 -------&amp;quot;) var value: Int = 100 print(&amp;quot;print: \(value)&amp;quot;) var p = UnsafeMutablePointer&amp;lt;Int&amp;gt;(&amp;amp;value) printInt(atAddress: p) // Rewrite the original value changeInt(atAddress: p, value: 0) printInt(atAddress: p) print(&amp;quot;print: \(value)&amp;quot;) print() }() // - Array -------------------------------------------- let array = { () -&amp;gt; () in print(&amp;quot;- Array -------&amp;quot;) var array: [Int] = [11, 22, 33, 44] print(&amp;quot;print: \(array)&amp;quot;) var p = UnsafeMutablePointer&amp;lt;Int&amp;gt;.</description>
    </item>
    
    <item>
      <title>[Swift4] Overview of Core Data</title>
      <link>https://masakipedia.github.io/blog/2018/04/22/2018-04-22-1/</link>
      <pubDate>Sun, 22 Apr 2018 11:50:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/22/2018-04-22-1/</guid>
      <description>はじめに Core Data の勉強をまとめておきます。

引用 : Core Dataプログラミングガイド
https://developer.apple.com/jp/documentation/Cocoa&amp;hellip;

Core Data とは  Core Data = アプリケーションのモデル階層オブジェクトを管理するためのフレームワーク  できること  オブジェクトの永続化などが可能 処理が自動で最適化される    
Core Data の構成  Core Data スタック = データストアとアプリケーションのオブジェクトを仲介するフレームワークオブジェクトの集合
 フレームワークオブジェクト
 管理オブジェクトモデル（NSManagedObjectModel）
 Core Data スタックによってアクセスされるデータを記述するもの   永続ストアコーディネータ（NSPersistentStoreCoordinator）
 エンティティのインスタンス実体化を担当する 既存のインスタンスを永続ストア（NSPersistentStore）から取得する  管理オブジェクトコンテキスト(NSManagedObjectContext)
 作業領域 オブジェクトをフェッチする場合など、一旦作業領域にコピーされる     
Core Data の使用手順 Core Dataスタック の生成 Core Data スタックを初期化することで、データ要求および生成の準備が整う。 よって、アプリケーションのデータを生成する前に実行する。</description>
    </item>
    
    <item>
      <title>[Swift4] Add shadow to UIView with playground</title>
      <link>https://masakipedia.github.io/blog/2018/04/14/2018-04-14-1/</link>
      <pubDate>Sat, 14 Apr 2018 21:40:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/14/2018-04-14-1/</guid>
      <description>はじめに View に Shadow をつける時、色々試したいので Playground で実装しました。
また、UIView に Shadow をつけると意外と行数が多くなるので、
UIView の拡張に addShadow を作りました。

Playground import UIKit import PlaygroundSupport extension UIView { func addShadow(radius: CGFloat, shadowColor: UIColor, offset: CGSize, opacity: Float) { self.layer.shadowColor = shadowColor.cgColor self.layer.shadowOpacity = opacity self.layer.shadowOffset = offset self.layer.shadowRadius = radius self.layer.shadowPath = UIBezierPath(roundedRect: self.bounds, cornerRadius: radius).cgPath self.layer.shouldRasterize = true self.layer.rasterizationScale = UIScreen.main.scale } } let baseView = UIView(frame: CGRect(x: 0, y: 0, width: 400, height: 400)) let shadowView = UIView(frame: CGRect(x: 100, y: 100, width: 200, height: 200)) shadowView.</description>
    </item>
    
    <item>
      <title>[GPGPU] Overview of GPGPU</title>
      <link>https://masakipedia.github.io/blog/2018/04/13/2018-02-13-1/</link>
      <pubDate>Fri, 13 Apr 2018 11:50:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/13/2018-02-13-1/</guid>
      <description>はじめに 大学4年になり、GPGPUについての研究を考えているので、
GPGPUについての概要をまとめます。

GPGPU とは GPGPU (General-purpose computing on graphics processing unit; GPUによる汎用計算) とは、
GPUの演算資源を画像処理以外の目的に応用する技術のことです。[1]

GPU とは GPUとは、CPUと比べて並列計算に優れた演算装置です。
そのため、CPUとはコア数が大きく異なります。
 GPU CPU のコア数を比較   コア数   NVIDIA GeForce GTX 750 Ti [2] 640   Intel Core i7-8709G [3] 4   
主に画像処理の演算に使われているようです。

GPGPU の活用領域 GPU を開発している NVIDIA の DEVELOPER サイト[4]には次のカテゴリが示されています。
 Deep Learning
 Autonomous Vehicles
 Virtual Reality
 Game Development</description>
    </item>
    
    <item>
      <title>[Go] Write CSV file</title>
      <link>https://masakipedia.github.io/blog/2018/04/09/2018-04-09-1/</link>
      <pubDate>Mon, 09 Apr 2018 11:00:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/09/2018-04-09-1/</guid>
      <description>はじめに Go言語でCSVファイルを生成する方法を確認したいと思います。

Go でCSVファイル生成 &amp;amp; 書き込み コードは以下になります。
 リファレンス : https://golang.org/pkg/encoding/csv/  
package main import ( &amp;quot;encoding/csv&amp;quot; &amp;quot;log&amp;quot; &amp;quot;os&amp;quot; ) func main() { file, err := os.Create(&amp;quot;./samples.csv&amp;quot;) if err != nil { log.Println(err) } defer file.Close() writer := csv.NewWriter(file) writer.WriteAll(samples) writer.Flush() }</description>
    </item>
    
    <item>
      <title>[CSS] Make hamburger menu with only css</title>
      <link>https://masakipedia.github.io/blog/2018/04/06/2018-04-06-1/</link>
      <pubDate>Fri, 06 Apr 2018 22:00:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/06/2018-04-06-1/</guid>
      <description>Introduction Without using JavaScript, CSS alone made a simple hamburger menu.
Also, narrowing the screen of this website will display this hamburger menu.

html 
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt; .hamburger-menu #hamburger-handler { display: none; } .hamburger-menu .content { display: none; } .hamburger-menu .cross { display: none; left: 0px; top: 0px; } .hamburger-menu #hamburger-handler:checked ~ .content { display: list-item; } .hamburger-menu #hamburger-handler:checked ~ .cross { display: block; } .</description>
    </item>
    
    <item>
      <title>[Swift4] UIPageViewController with playground</title>
      <link>https://masakipedia.github.io/blog/2018/04/05/2018-04-05/</link>
      <pubDate>Thu, 05 Apr 2018 15:19:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/05/2018-04-05/</guid>
      <description>はじめに   UIPageViewController の仕組みを理解するのに苦労したので、 Playgroud で試せるコードを実装しました。  Playground  import UIKit import PlaygroundSupport class ContainerViewController: UIViewController { var pageViewController: UIPageViewController! // user setting let pageTotal: Int = 3 } extension ContainerViewController { override func viewDidLoad() { super.viewDidLoad() pageViewController = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil) let firstViewController = generateViewControllerAtIndex(0) pageViewController.setViewControllers([firstViewController], direction: .forward, animated: true, completion: nil) pageViewController.dataSource = self self.addChildViewController(pageViewController) self.view.addSubview(pageViewController.view) } } // MARK: - DataSource extension ContainerViewController: UIPageViewControllerDataSource { func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -&amp;gt; UIViewController?</description>
    </item>
    
  </channel>
</rss>