<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Playground on @masakipedia</title>
    <link>https://masakipedia.github.io/tags/playground/</link>
    <description>Recent content in Playground on @masakipedia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 21 Jun 2018 22:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://masakipedia.github.io/tags/playground/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Swift4] Landolt C</title>
      <link>https://masakipedia.github.io/blog/2018/06/2018-06-21/</link>
      <pubDate>Thu, 21 Jun 2018 22:00:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/06/2018-06-21/</guid>
      <description>Introduction I have developed the Landolt C class this time.

Example  Generate instance
let distanceFromDeviceToEyes: CGFloat = 5 // [m] let landoltCViewRect = CGRect(x: 0, y: 0, width: 300, height: 300) let landoltC = LandoltC(d: distanceFromCameraToEyes, rect: landoltCViewRect)  Landolt C view
PlaygroundPage.current.liveView = landoltC.landoltCView  Update gap width [m]
landoltC.updateGap(gap: 0.00145)  Change gap direction
landoltC.changeDirection(.right)  Caluculate eyesight
landoltC.eyesight()   
Playground import UIKit import PlaygroundSupport /// An extension to UIScreen that offers information about the pixel density (or point density) of iPhones and iPads.</description>
    </item>
    
    <item>
      <title>[Swift4] Pie Chart View</title>
      <link>https://masakipedia.github.io/blog/2018/05/20/2018-05-20-1/</link>
      <pubDate>Sun, 20 May 2018 22:00:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/05/20/2018-05-20-1/</guid>
      <description>Introduction In this time, i created the extension class PieChartView of UIView which generates a pie chart in the playground.

Playground import UIKit import PlaygroundSupport class PieChartView: UIView { private var percent: CGFloat = 0 private let radius: CGFloat = 80 private let lineWidth: CGFloat = 20 private let fontSize: CGFloat = 35 required init?(coder aDecoder: NSCoder) { super.init(coder:aDecoder) } init(frame: CGRect, percent: CGFloat) { super.init(frame: frame) self.percent = percent setPercentLabel(percent: percent, textColor: .</description>
    </item>
    
    <item>
      <title>[Swift4] Generate QR Code</title>
      <link>https://masakipedia.github.io/blog/2018/05/06/2018-05-06-1/</link>
      <pubDate>Sun, 06 May 2018 12:00:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/05/06/2018-05-06-1/</guid>
      <description>Introduction The method of generating QR Code in the playground is as follows.

Playground import UIKit import PlaygroundSupport func generateQRCode(from string: String) -&amp;gt; UIImage? { let data = string.data(using: .utf8) if let filter = CIFilter(name: &amp;quot;CIQRCodeGenerator&amp;quot;) { filter.setValue(data, forKey: &amp;quot;inputMessage&amp;quot;) filter.setValue(&amp;quot;M&amp;quot;, forKey: &amp;quot;inputCorrectionLevel&amp;quot;) let transform = CGAffineTransform(scaleX: 8, y: 8) if let ciImage = filter.outputImage?.transformed(by: transform) { let context: CIContext = CIContext.init(options: nil) let cgImage: CGImage = context.createCGImage(ciImage, from: ciImage.</description>
    </item>
    
    <item>
      <title>[Swift4] Pointer with playground</title>
      <link>https://masakipedia.github.io/blog/2018/04/23/2018-04-23-1/</link>
      <pubDate>Mon, 23 Apr 2018 16:00:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/23/2018-04-23-1/</guid>
      <description>はじめに Swift でのポインタについて学びました。
以下は Playground で色々試したコードです。

参考 : https://developer.apple.com/documentation/swift/unsafemutablepointer

Playground func printInt(atAddress p: UnsafePointer&amp;lt;Int&amp;gt;) { print(&amp;quot;printInt: \(p.pointee)&amp;quot;) } func changeInt(atAddress p: UnsafeMutablePointer&amp;lt;Int&amp;gt;, value: Int) { p.pointee = value } // - UnsafePointer ----------------------------------- let unsafePointer = { () -&amp;gt; () in print(&amp;quot;- UnsafePointer -------&amp;quot;) var value: Int = 23 print(&amp;quot;print: \(value)&amp;quot;) printInt(atAddress: &amp;amp;value) print() }() // - UnsafeMutablePointer ---------------------------- let unsafeMutablePointer = { () -&amp;gt; () in print(&amp;quot;- UnsafeMutablePointer -------&amp;quot;) var value: Int = 100 print(&amp;quot;print: \(value)&amp;quot;) changeInt(atAddress: &amp;amp;value, value: 0) printInt(atAddress: &amp;amp;value) print() }() // - UnsafeMutablePointer 2 -------------------------- let unsafeMutablePointer2 = { () -&amp;gt; () in print(&amp;quot;- UnsafeMutablePointer 2 -------&amp;quot;) var value: Int = 100 print(&amp;quot;print: \(value)&amp;quot;) var p = UnsafeMutablePointer&amp;lt;Int&amp;gt;(&amp;amp;value) printInt(atAddress: p) // Rewrite the original value changeInt(atAddress: p, value: 0) printInt(atAddress: p) print(&amp;quot;print: \(value)&amp;quot;) print() }() // - Array -------------------------------------------- let array = { () -&amp;gt; () in print(&amp;quot;- Array -------&amp;quot;) var array: [Int] = [11, 22, 33, 44] print(&amp;quot;print: \(array)&amp;quot;) var p = UnsafeMutablePointer&amp;lt;Int&amp;gt;.</description>
    </item>
    
    <item>
      <title>[Swift4] Add shadow to UIView with playground</title>
      <link>https://masakipedia.github.io/blog/2018/04/14/2018-04-14-1/</link>
      <pubDate>Sat, 14 Apr 2018 21:40:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/14/2018-04-14-1/</guid>
      <description>はじめに View に Shadow をつける時、色々試したいので Playground で実装しました。
また、UIView に Shadow をつけると意外と行数が多くなるので、
UIView の拡張に addShadow を作りました。

Playground import UIKit import PlaygroundSupport extension UIView { func addShadow(radius: CGFloat, shadowColor: UIColor, offset: CGSize, opacity: Float) { self.layer.shadowColor = shadowColor.cgColor self.layer.shadowOpacity = opacity self.layer.shadowOffset = offset self.layer.shadowRadius = radius self.layer.shadowPath = UIBezierPath(roundedRect: self.bounds, cornerRadius: radius).cgPath self.layer.shouldRasterize = true self.layer.rasterizationScale = UIScreen.main.scale } } let baseView = UIView(frame: CGRect(x: 0, y: 0, width: 400, height: 400)) let shadowView = UIView(frame: CGRect(x: 100, y: 100, width: 200, height: 200)) shadowView.</description>
    </item>
    
    <item>
      <title>[Swift4] UIPageViewController with playground</title>
      <link>https://masakipedia.github.io/blog/2018/04/05/2018-04-05/</link>
      <pubDate>Thu, 05 Apr 2018 15:19:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/05/2018-04-05/</guid>
      <description>はじめに   UIPageViewController の仕組みを理解するのに苦労したので、 Playgroud で試せるコードを実装しました。  Playground  import UIKit import PlaygroundSupport class ContainerViewController: UIViewController { var pageViewController: UIPageViewController! // user setting let pageTotal: Int = 3 } extension ContainerViewController { override func viewDidLoad() { super.viewDidLoad() pageViewController = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil) let firstViewController = generateViewControllerAtIndex(0) pageViewController.setViewControllers([firstViewController], direction: .forward, animated: true, completion: nil) pageViewController.dataSource = self self.addChildViewController(pageViewController) self.view.addSubview(pageViewController.view) } } // MARK: - DataSource extension ContainerViewController: UIPageViewControllerDataSource { func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -&amp;gt; UIViewController?</description>
    </item>
    
  </channel>
</rss>