<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xcode9 on @masakipedia</title>
    <link>https://masakipedia.github.io/tags/xcode9/</link>
    <description>Recent content in Xcode9 on @masakipedia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 06 May 2018 12:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://masakipedia.github.io/tags/xcode9/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Swift4] Generate QR Code</title>
      <link>https://masakipedia.github.io/blog/2018/05/06/2018-05-06-1/</link>
      <pubDate>Sun, 06 May 2018 12:00:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/05/06/2018-05-06-1/</guid>
      <description>Introduction The method of generating QR Code in the playground is as follows.

Playground import UIKit import PlaygroundSupport func generateQRCode(from string: String) -&amp;gt; UIImage? { let data = string.data(using: .utf8) if let filter = CIFilter(name: &amp;quot;CIQRCodeGenerator&amp;quot;) { filter.setValue(data, forKey: &amp;quot;inputMessage&amp;quot;) filter.setValue(&amp;quot;M&amp;quot;, forKey: &amp;quot;inputCorrectionLevel&amp;quot;) let transform = CGAffineTransform(scaleX: 8, y: 8) if let output = filter.outputImage?.transformed(by: transform) { return UIImage(ciImage: output) } } return nil } let str = &amp;quot;https://masakipedia.</description>
    </item>
    
    <item>
      <title>[Swift4] Play Video</title>
      <link>https://masakipedia.github.io/blog/2018/05/04/2018-05-04-1/</link>
      <pubDate>Fri, 04 May 2018 15:00:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/05/04/2018-05-04-1/</guid>
      <description>Introduction The method of playing video in the iOS application is as follows.

[iOS] Xcode Single View App import UIKit import AVFoundation class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() let path = Bundle.main.path(forResource: &amp;quot;test&amp;quot;, ofType: &amp;quot;mov&amp;quot;) self.playVideo(path: path!, parentView: self.view, frame: self.view.frame, replayInterval: 9) } func playVideo(path: String, parentView: UIView, frame: CGRect, replayInterval: TimeInterval) { let fileURL = URL(fileURLWithPath: path) let avAsset = AVURLAsset(url: fileURL) let playerItem = AVPlayerItem(asset: avAsset) let videoPlayer = AVPlayer(playerItem: playerItem) let layer = AVPlayerView().</description>
    </item>
    
    <item>
      <title>[Swift4] Write CSV file</title>
      <link>https://masakipedia.github.io/blog/2018/04/30/2018-04-30-1/</link>
      <pubDate>Mon, 30 Apr 2018 21:00:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/30/2018-04-30-1/</guid>
      <description>Introduction The method of outputting the CSV file in the iOS application is as follows.

[iOS] Xcode Single View App import UIKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() let writeButton = UIButton(frame: CGRect(x: (self.view.frame.width - 200) / 2, y: (self.view.frame.height - 50) / 2, width: 200, height: 50)) writeButton.setTitle(&amp;quot;write csv !!&amp;quot;, for: .normal) writeButton.setTitleColor(.blue, for: .normal) writeButton.addTarget(self, action: #selector(self.tapWriteCSV(_:)), for: .touchUpInside) self.view.addSubview(writeButton) } @objc func tapWriteCSV(_ sender: Any) { let fileName = &amp;quot;test.</description>
    </item>
    
    <item>
      <title>[Swift4] Pointer with playground</title>
      <link>https://masakipedia.github.io/blog/2018/04/23/2018-04-23-1/</link>
      <pubDate>Mon, 23 Apr 2018 16:00:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/23/2018-04-23-1/</guid>
      <description>はじめに Swift でのポインタについて学びました。
以下は Playground で色々試したコードです。

参考 : https://developer.apple.com/documentation/swift/unsafemutablepointer

Playground func printInt(atAddress p: UnsafePointer&amp;lt;Int&amp;gt;) { print(&amp;quot;printInt: \(p.pointee)&amp;quot;) } func changeInt(atAddress p: UnsafeMutablePointer&amp;lt;Int&amp;gt;, value: Int) { p.pointee = value } // - UnsafePointer ----------------------------------- let unsafePointer = { () -&amp;gt; () in print(&amp;quot;- UnsafePointer -------&amp;quot;) var value: Int = 23 print(&amp;quot;print: \(value)&amp;quot;) printInt(atAddress: &amp;amp;value) print() }() // - UnsafeMutablePointer ---------------------------- let unsafeMutablePointer = { () -&amp;gt; () in print(&amp;quot;- UnsafeMutablePointer -------&amp;quot;) var value: Int = 100 print(&amp;quot;print: \(value)&amp;quot;) changeInt(atAddress: &amp;amp;value, value: 0) printInt(atAddress: &amp;amp;value) print() }() // - UnsafeMutablePointer 2 -------------------------- let unsafeMutablePointer2 = { () -&amp;gt; () in print(&amp;quot;- UnsafeMutablePointer 2 -------&amp;quot;) var value: Int = 100 print(&amp;quot;print: \(value)&amp;quot;) var p = UnsafeMutablePointer&amp;lt;Int&amp;gt;(&amp;amp;value) printInt(atAddress: p) // Rewrite the original value changeInt(atAddress: p, value: 0) printInt(atAddress: p) print(&amp;quot;print: \(value)&amp;quot;) print() }() // - Array -------------------------------------------- let array = { () -&amp;gt; () in print(&amp;quot;- Array -------&amp;quot;) var array: [Int] = [11, 22, 33, 44] print(&amp;quot;print: \(array)&amp;quot;) var p = UnsafeMutablePointer&amp;lt;Int&amp;gt;.</description>
    </item>
    
    <item>
      <title>[Swift4] Overview of Core Data</title>
      <link>https://masakipedia.github.io/blog/2018/04/22/2018-04-22-1/</link>
      <pubDate>Sun, 22 Apr 2018 11:50:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/22/2018-04-22-1/</guid>
      <description>はじめに Core Data の勉強をまとめておきます。

引用 : Core Dataプログラミングガイド
https://developer.apple.com/jp/documentation/Cocoa&amp;hellip;

Core Data とは  Core Data = アプリケーションのモデル階層オブジェクトを管理するためのフレームワーク  できること  オブジェクトの永続化などが可能 処理が自動で最適化される    
Core Data の構成  Core Data スタック = データストアとアプリケーションのオブジェクトを仲介するフレームワークオブジェクトの集合
 フレームワークオブジェクト
 管理オブジェクトモデル（NSManagedObjectModel）
 Core Data スタックによってアクセスされるデータを記述するもの   永続ストアコーディネータ（NSPersistentStoreCoordinator）
 エンティティのインスタンス実体化を担当する 既存のインスタンスを永続ストア（NSPersistentStore）から取得する  管理オブジェクトコンテキスト(NSManagedObjectContext)
 作業領域 オブジェクトをフェッチする場合など、一旦作業領域にコピーされる     
Core Data の使用手順 Core Dataスタック の生成 Core Data スタックを初期化することで、データ要求および生成の準備が整う。 よって、アプリケーションのデータを生成する前に実行する。</description>
    </item>
    
    <item>
      <title>[Swift4] Add shadow to UIView with playground</title>
      <link>https://masakipedia.github.io/blog/2018/04/14/2018-04-14-1/</link>
      <pubDate>Sat, 14 Apr 2018 21:40:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/14/2018-04-14-1/</guid>
      <description>はじめに View に Shadow をつける時、色々試したいので Playground で実装しました。
また、UIView に Shadow をつけると意外と行数が多くなるので、
UIView の拡張に addShadow を作りました。

Playground import UIKit import PlaygroundSupport extension UIView { func addShadow(radius: CGFloat, shadowColor: UIColor, offset: CGSize, opacity: Float) { self.layer.shadowColor = shadowColor.cgColor self.layer.shadowOpacity = opacity self.layer.shadowOffset = offset self.layer.shadowRadius = radius self.layer.shadowPath = UIBezierPath(roundedRect: self.bounds, cornerRadius: radius).cgPath self.layer.shouldRasterize = true self.layer.rasterizationScale = UIScreen.main.scale } } let baseView = UIView(frame: CGRect(x: 0, y: 0, width: 400, height: 400)) let shadowView = UIView(frame: CGRect(x: 100, y: 100, width: 200, height: 200)) shadowView.</description>
    </item>
    
    <item>
      <title>[Swift4] UIPageViewController with playground</title>
      <link>https://masakipedia.github.io/blog/2018/04/05/2018-04-05/</link>
      <pubDate>Thu, 05 Apr 2018 15:19:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/05/2018-04-05/</guid>
      <description>はじめに   UIPageViewController の仕組みを理解するのに苦労したので、 Playgroud で試せるコードを実装しました。  Playground  import UIKit import PlaygroundSupport class ContainerViewController: UIViewController { var pageViewController: UIPageViewController! // user setting let pageTotal: Int = 3 } extension ContainerViewController { override func viewDidLoad() { super.viewDidLoad() pageViewController = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil) let firstViewController = generateViewControllerAtIndex(0) pageViewController.setViewControllers([firstViewController], direction: .forward, animated: true, completion: nil) pageViewController.dataSource = self self.addChildViewController(pageViewController) self.view.addSubview(pageViewController.view) } } // MARK: - DataSource extension ContainerViewController: UIPageViewControllerDataSource { func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -&amp;gt; UIViewController?</description>
    </item>
    
  </channel>
</rss>