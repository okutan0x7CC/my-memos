<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xcode9 on @masakipedia</title>
    <link>https://masakipedia.github.io/tags/xcode9/</link>
    <description>Recent content in Xcode9 on @masakipedia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 22 Apr 2018 11:50:00 +0900</lastBuildDate>
    
	<atom:link href="https://masakipedia.github.io/tags/xcode9/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Swift4] How to use CoreData</title>
      <link>https://masakipedia.github.io/blog/2018/04/22/2018-04-22-1/</link>
      <pubDate>Sun, 22 Apr 2018 11:50:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/22/2018-04-22-1/</guid>
      <description>はじめに Core Data の勉強をまとめておきます。

引用 : Core Dataプログラミングガイド
https://developer.apple.com/jp/documentation/Cocoa&amp;hellip;

Core Data とは  Core Data = アプリケーションのモデル階層オブジェクトを管理するためのフレームワーク  できること  オブジェクトの永続化などが可能 処理が自動で最適化される    
Core Data の構成  Core Data スタック = データストアとアプリケーションのオブジェクトを仲介するフレームワークオブジェクトの集合
 フレームワークオブジェクト
 管理オブジェクトモデル（NSManagedObjectModel）
 Core Data スタックによってアクセスされるデータを記述するもの   永続ストアコーディネータ（NSPersistentStoreCoordinator）
 エンティティのインスタンス実体化を担当する 既存のインスタンスを永続ストア（NSPersistentStore）から取得する  管理オブジェクトコンテキスト(NSManagedObjectContext)
 作業領域 オブジェクトをフェッチする場合など、一旦作業領域にコピーされる     
Core Data の使用手順 Core Dataスタック の生成 Core Data スタックを初期化することで、データ要求および生成の準備が整う。 よって、アプリケーションのデータを生成する前に実行する。</description>
    </item>
    
    <item>
      <title>[Swift4] Add shadow to UIView with playground</title>
      <link>https://masakipedia.github.io/blog/2018/04/14/2018-04-14-1/</link>
      <pubDate>Sat, 14 Apr 2018 21:40:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/14/2018-04-14-1/</guid>
      <description>はじめに View に Shadow をつける時、色々試したいので Playground で実装しました。
また、UIView に Shadow をつけると意外と行数が多くなるので、
UIView の拡張に addShadow を作りました。

コードはこちら import UIKit import PlaygroundSupport extension UIView { func addShadow(radius: CGFloat, shadowColor: UIColor, offset: CGSize, opacity: Float) { self.layer.shadowColor = shadowColor.cgColor self.layer.shadowOpacity = opacity self.layer.shadowOffset = offset self.layer.shadowRadius = radius self.layer.shadowPath = UIBezierPath(roundedRect: self.bounds, cornerRadius: radius).cgPath self.layer.shouldRasterize = true self.layer.rasterizationScale = UIScreen.main.scale } } let baseView = UIView(frame: CGRect(x: 0, y: 0, width: 400, height: 400)) let shadowView = UIView(frame: CGRect(x: 100, y: 100, width: 200, height: 200)) shadowView.</description>
    </item>
    
    <item>
      <title>[Swift4] UIPageViewController with playground</title>
      <link>https://masakipedia.github.io/blog/2018/04/05/2018-04-05/</link>
      <pubDate>Thu, 05 Apr 2018 15:19:00 +0900</pubDate>
      
      <guid>https://masakipedia.github.io/blog/2018/04/05/2018-04-05/</guid>
      <description>はじめに   UIPageViewController の仕組みを理解するのに苦労したので、 Playgroud で試せるコードを実装しました。  コードはこちら  import UIKit import PlaygroundSupport class ContainerViewController: UIViewController { var pageViewController: UIPageViewController! // user setting let pageTotal: Int = 3 } extension ContainerViewController { override func viewDidLoad() { super.viewDidLoad() pageViewController = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil) let firstViewController = generateViewControllerAtIndex(0) pageViewController.setViewControllers([firstViewController], direction: .forward, animated: true, completion: nil) pageViewController.dataSource = self self.addChildViewController(pageViewController) self.view.addSubview(pageViewController.view) } } // MARK: - DataSource extension ContainerViewController: UIPageViewControllerDataSource { func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -&amp;gt; UIViewController?</description>
    </item>
    
  </channel>
</rss>